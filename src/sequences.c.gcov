        -:    0:Source:/Users/standard/Desktop/Projects/raytracer/raytracer/src/sequences.c
        -:    0:Graph:../build/CMakeFiles/main_lib.dir/src/sequences.c.gcno
        -:    0:Data:../build/CMakeFiles/main_lib.dir/src/sequences.c.gcda
        -:    0:Runs:1
        -:    1:// sequences.c
        -:    2:
        -:    3:#include "../include/sequences.h"
        -:    4:#include <string.h>
        -:    5:
       46:    6:sequence_t sequence_new(void)
        -:    7:{
        -:    8:    sequence_t seq;
       46:    9:    seq.count         = 0;
       46:   10:    seq.current_index = 0;
       46:   11:    memset(seq.values, 0, sizeof(seq.values));
       46:   12:    return seq;
        -:   13:}
        -:   14:
       71:   15:void sequence_add(sequence_t *seq, double value)
        -:   16:{
       71:   17:    if (seq->count < MAX_SEQUENCE_LENGTH)
        -:   18:    {
       71:   19:        seq->values[seq->count] = value;
       71:   20:        seq->count++;
       71:   21:    }
       71:   22:}
        -:   23:
        7:   24:sequence_t sequence_from_array(const double *values, int count)
        -:   25:{
        7:   26:    sequence_t seq = sequence_new();
       37:   27:    for (int i = 0; i < count && i < MAX_SEQUENCE_LENGTH; i++)
        -:   28:    {
       30:   29:        sequence_add(&seq, values[i]);
       30:   30:    }
        7:   31:    return seq;
        -:   32:}
        -:   33:
        8:   34:double sequence_next(sequence_t *seq)
        -:   35:{
        8:   36:    if (seq->count == 0)
        -:   37:    {
    #####:   38:        return 0.5;
        -:   39:    }
        -:   40:
        8:   41:    double value       = seq->values[seq->current_index];
        8:   42:    seq->current_index = (seq->current_index + 1) % seq->count;
        8:   43:    return value;
        8:   44:}
        -:   45:
      116:   46:double sequence_at(const sequence_t *seq, int index)
        -:   47:{
      116:   48:    if (seq->count == 0)
        -:   49:    {
    #####:   50:        return 0.5;
        -:   51:    }
      116:   52:    return seq->values[index % seq->count];
      116:   53:}
